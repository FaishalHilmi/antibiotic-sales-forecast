// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PHARMACIST
  CASHIER
}

enum StockAction {
  IN
  OUT
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  username    String    @unique
  password    String
  role        Role
  imagePath   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? 
  transaction Transaction[]
}

model Medicine {
  id                  Int       @id @default(autoincrement())
  name                String
  category            String
  price               Decimal
  stock               Int?      @default(0)
  unit                String
  imagePath           String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime? 
  stockLogs           StockLog[]
  transactionDetails  DetailTransaction[]
  forecastHistory     ForecastHistory[]
  salesRecaps         SalesRecap[]
  salesRecapDetails   SalesRecapDetail[]
  weeklySales         WeeklySales[]
}

model StockLog {
  id          Int           @id @default(autoincrement())
  medicineId  Int
  medicine    Medicine      @relation(fields: [medicineId], references: [id])
  action      StockAction
  quantity    Int
  note        String?
  date        DateTime      @default(now())
}

model Transaction {
  id             String        @id 
  cashier        User          @relation(fields:[cashierId], references: [id])
  cashierId      Int
  totalItems     Int 
  totalAmount    Decimal 
  paymentMethod  String
  createdAt      DateTime      @default(now())
  deletedAt      DateTime?     
  details        DetailTransaction[] 
}

model DetailTransaction {
  id             Int           @id @default(autoincrement())
  transaction    Transaction   @relation(fields: [transactionId], references: [id])
  transactionId  String
  medicine       Medicine      @relation(fields: [medicineId], references: [id])
  medicineId     Int
  quantity       Int
  unitPrice      Decimal
  subtotal       Decimal
}

model SalesRecap {
  id                   Int                  @id @default(autoincrement())
  month                Int
  year                 Int
  totalTransactions    Int
  totalSoldQuantity    Int
  grossRevenue         Decimal
  topSellingMedicine   String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  recapDetails         SalesRecapDetail[]
  medicineId           Int                 
  medicine             Medicine             @relation(fields: [medicineId], references: [id])
}

model SalesRecapDetail {
  id            Int        @id @default(autoincrement())
  salesRecap    SalesRecap @relation(fields: [salesRecapId], references: [id])
  salesRecapId  Int
  medicine      Medicine   @relation(fields: [medicineId], references: [id])
  medicineId    Int
  quantitySold  Int
  unitPrice     Decimal
  totalRevenue  Decimal
}

model ForecastHistory {
  id              Int                @id @default(autoincrement())
  medicineId      Int
  forecastDate    DateTime
  period          Int
  medicine        Medicine           @relation(fields: [medicineId], references: [id])
  forecastResults ForecastResult[]
  summary         ForecastSummary?
}

model ForecastResult {
  id             Int              @id @default(autoincrement())
  historyId      Int
  periodLabel    String
  actualValue    Decimal?         @db.Decimal(12, 2)
  forecastValue  Decimal?         @db.Decimal(12, 2)
  mape           Decimal?         @db.Decimal(6, 2)
  mae            Decimal?         @db.Decimal(6, 2)
  history        ForecastHistory  @relation(fields: [historyId], references: [id], onDelete: Cascade)
}

model ForecastSummary {
  id             Int              @id @default(autoincrement())
  historyId      Int              @unique
  weightMethod   String
  avgMae         Decimal          @db.Decimal(6, 2)
  avgMape        Decimal          @db.Decimal(6, 2)
  history        ForecastHistory  @relation(fields: [historyId], references: [id])
}

model WeeklySales {
  id            Int       @id @default(autoincrement())
  weekNumber    Int
  year          Int
  startDate     DateTime
  endDate       DateTime
  isCompleted   Boolean   @default(false)
  medicineId    Int
  quantitySold  Int
  totalRevenue  Decimal   @default(0)

  medicine      Medicine  @relation(fields: [medicineId], references: [id])

  @@unique([medicineId, weekNumber, year])
}